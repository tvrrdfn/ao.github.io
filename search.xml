<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[删除已安装插件]]></title>
    <url>%2Ftest%2F</url>
    <content type="text"><![CDATA[sublime 删除已安装插件 ctr+shift+p 调出插件窗口 然后输入remove, 选择remove Package 再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19 个 JavaScript 常用的简写技术]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[1.三元操作符当想写if…else语句时，使用三元操作符来代替。1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'is greater';&#125; else &#123; answer = 'is lesser';&#125; 简写1const answer = x &gt; 10 ? 'is greater' : 'is lesser'; 也可以嵌套if语句：1const big = x &gt; 10 ? " greater 10" : x 2.短路求值简写方式当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。123if (variable1 !== null || variable1 !== undefined || variable1 !== '') &#123; let variable2 = variable1;&#125; 或者可以使用短路求值方法：1const variable2 = variable1 || 'new'; 3.声明变量简写方法123let x;let y;let z = 3; 简写方法： 1let x, y, z=3; 4.if存在条件简写方法1if (likeJavaScript === true) 简写： 1if (likeJavaScript) 只有likeJavaScript是真值时，二者语句才相等如果判断值不是真值，则可以这样： 1234let a;if ( a !== true ) &#123;// do something...&#125; 简写： 1234let a;if ( !a ) &#123;// do something...&#125; 5.JavaScript循环简写方法1for (let i = 0; i &lt; allImgs.length; i++) 简写： 1for (let index in allImgs) 也可以使用Array.forEach： 12345678function logArrayElements(element, index, array) &#123; console.log("a[" + index + "] = " + element);&#125;[2, 5, 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[2] = 9 6.短路评价给一个变量分配的值是通过判断其值是否为null或undefined，则可以： 123456let dbHost;if (process.env.DB_HOST) &#123; dbHost = process.env.DB_HOST;&#125; else &#123; dbHost = 'localhost';&#125; 简写： 1const dbHost = process.env.DB_HOST || 'localhost'; 7.十进制指数当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字： 1for (let i = 0; i &lt; 10000; i++) &#123;&#125; 简写： 123456789for (let i = 0; i &lt; 1e7; i++) &#123;&#125;// 下面都是返回true1e0 === 1;1e1 === 10;1e2 === 100;1e3 === 1000;1e4 === 10000;1e5 === 100000; 8.对象属性简写如果属性名与key名相同，则可以采用ES6的方法： 1const obj = &#123; x:x, y:y &#125;; 简写： 1const obj = &#123; x, y &#125;; 9.箭头函数简写传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。 1234567891011function sayHello(name) &#123; console.log('Hello', name);&#125;setTimeout(function() &#123; console.log('Loaded')&#125;, 2000);list.forEach(function(item) &#123; console.log(item);&#125;); 简写： 12345sayHello = name =&gt; console.log('Hello', name);setTimeout(() =&gt; console.log('Loaded'), 2000);list.forEach(item =&gt; console.log(item)); 10.隐式返回值简写经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字） 为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。 1234567function calcCircumference(diameter) &#123; return Math.PI * diameter&#125;var func = function func() &#123; return &#123; foo: 1 &#125;;&#125;; 简写： 12345calcCircumference = diameter =&gt; ( Math.PI * diameter;)var func = () =&gt; (&#123; foo: 1 &#125;); 11.默认参数值为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁： 1234567function volume(l, w, h) &#123; if (w === undefined) w = 3; if (h === undefined) h = 4; return l * w * h;&#125; 简写： 123volume = (l, w = 3, h = 4 ) =&gt; (l * w * h);volume(2) //output: 24 12.模板字符串传统的JavaScript语言，输出模板通常是这样写的。 123const welcome = 'You have logged in as ' + first + ' ' + last + '.'const db = 'http://' + host + ':' + port + '/' + database; ES6可以使用反引号和${}简写： 123const welcome = `You have logged in as $&#123;first&#125; $&#123;last&#125;`;const db = `http://$&#123;host&#125;:$&#123;port&#125;/$&#123;database&#125;`; 13.解构赋值简写方法在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它 123456789const observable = require('mobx/observable');const action = require('mobx/action');const runInAction = require('mobx/runInAction');const store = this.props.store;const form = this.props.form;const loading = this.props.loading;const errors = this.props.errors;const entity = this.props.entity; 简写： 123import &#123; observable, action, runInAction &#125; from 'mobx';const &#123; store, form, loading, errors, entity &#125; = this.props; 也可以分配变量名： 12const &#123; store, form, loading, errors, entity:contact &#125; = this.props;//最后一个变量名为contact 14.多行字符串简写需要输出多行字符串，需要使用+来拼接： 123456const lorem = 'Lorem ipsum dolor sit amet, consectetur\n\t' + 'adipisicing elit, sed do eiusmod tempor incididunt\n\t' + 'ut labore et dolore magna aliqua. Ut enim ad minim\n\t' + 'veniam, quis nostrud exercitation ullamco laboris\n\t' + 'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t' + 'irure dolor in reprehenderit in voluptate velit esse.\n\t' 使用反引号，则可以达到简写作用： 123456const lorem = `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse.` 15.扩展运算符简写扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。 1234567// joining arraysconst odd = [1, 3, 5];const nums = [2 ,4 , 6].concat(odd);// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = arr.slice() 简写： 12345678// joining arraysconst odd = [1, 3, 5 ];const nums = [2 ,4 , 6, ...odd];console.log(nums); // [ 2, 4, 6, 1, 3, 5 ]// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = [...arr]; 不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。 12const odd = [1, 3, 5 ];const nums = [2, ...odd, 4 , 6]; 也可以使用扩展运算符解构： 1234const &#123; a, b, ...z &#125; = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;console.log(a) // 1console.log(b) // 2console.log(z) // &#123; c: 3, d: 4 &#125; 16.强制参数简写JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。 123456function foo(bar) &#123; if(bar === undefined) &#123; throw new Error('Missing parameter!'); &#125; return bar;&#125; 简写： 1234567mandatory = () =&gt; &#123; throw new Error('Missing parameter!');&#125;foo = (bar = mandatory()) =&gt; &#123; return bar;&#125; 17.Array.find简写想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。 12345678910111213const pets = [ &#123; type: 'Dog', name: 'Max'&#125;, &#123; type: 'Cat', name: 'Karl'&#125;, &#123; type: 'Dog', name: 'Tommy'&#125;,]function findDog(name) &#123; for(let i = 0; i&lt;pets.length; ++i) &#123; if(pets[i].type === 'Dog' &amp;&amp; pets[i].name === name) &#123; return pets[i]; &#125; &#125;&#125; 简写： 12pet = pets.find(pet =&gt; pet.type ==='Dog' &amp;&amp; pet.name === 'Tommy');console.log(pet); // &#123; type: 'Dog', name: 'Tommy' &#125; 18.Object[key]简写考虑一个验证函数 123456789function validate(values) &#123; if(!values.first) return false; if(!values.last) return false; return true;&#125;console.log(validate(&#123;first:'Bruce',last:'Wayne'&#125;)); // true 假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？ 12345678910111213141516171819202122232425// 对象验证规则const schema = &#123; first: &#123; required:true &#125;, last: &#123; required:true &#125;&#125;// 通用验证函数const validate = (schema, values) =&gt; &#123; for(field in schema) &#123; if(schema[field].required) &#123; if(!values[field]) &#123; return false; &#125; &#125; &#125; return true;&#125;console.log(validate(schema, &#123;first:'Bruce'&#125;)); // falseconsole.log(validate(schema, &#123;first:'Bruce',last:'Wayne'&#125;)); // true 现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了 19.双重非位运算简写有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。 1Math.floor(4.9) === 4 //true 简写 1~~4.9 === 4 //true]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
</search>